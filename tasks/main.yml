---
- block:
  - name: iptables Docker | Show groups['docker_hosts']
    debug: var=groups['docker_hosts']
  - name: iptables Docker | Show IPs in docker_hosts group
    debug: msg="{{ groups['docker_hosts'] | map('extract', hostvars, ['ansible_host']) | list }}"
  - name: iptables Docker | Show iptables_docker_ip_allow_set
    debug: var=iptables_docker_ip_allow_set
  - name: iptables Docker | Show iptables_docker_global_ports_allow_tcp
    debug: var=iptables_docker_global_ports_allow_tcp
  - name: iptables Docker | Show iptables_docker_global_ports_allow_udp
    debug: var=iptables_docker_global_ports_allow_udp
  - name: iptables Docker | Show iptables_docker_swarm_ports_allow_tcp
    debug: var=iptables_docker_swarm_ports_allow_tcp
  - name: iptables Docker | Show iptables_docker_swarm_ports_allow_udp
    debug: var=iptables_docker_swarm_ports_allow_udp
  - name: iptables Docker | iptables output (-nvL)
    command: iptables -nvL --line-numbers
    changed_when: false
  # - name: pause
  #   pause:
  #     seconds: 10
  # - name: iptables Docker | iptables output (-nvL)
  #   command: iptables -nvL --line-numbers
  #   changed_when: false
  #   register: stat_iptables_results
  # - name: iptables Docker | iptables output (-nvL) results
  #   debug: var=stat_iptables_results.stdout_lines
  - name: pause
    pause:
      seconds: 10
  when:
    - iptables_docker_managed|bool
    # - debug_enabled_default|bool
    - iptables_docker_show_config|bool
  tags:
    - iptables_docker
    - iptables_docker_show_config

#Not needed since this is now user IPs only
# - name: iptables Docker | fail if iptables_docker_ip_allow_set not defined
#   fail: msg="iptables_docker_ip_allow_set is not defined"
#   when:
#     - iptables_docker_managed|bool
#     - not iptables_docker_ip_allow_set
#   tags:
#     - iptables_docker

- name: iptables Docker | fail if host not in group 'docker_hosts'
  fail: msg="host is not in group 'docker_hosts'"
  when:
    - iptables_docker_managed|bool
    - "'docker_hosts' not in group_names"
  tags:
    - iptables_docker

- name: iptables Docker | fail if iptables_docker_external_network_adapter has '*'
  fail: msg="iptables_docker_external_network_adapter cannot have '*'"
  when:
    - iptables_docker_managed|bool
    - '"*" in iptables_docker_external_network_adapter'
  tags:
    - iptables_docker

- name: iptables Docker | fail if iptables_docker_swarm_network_adapter has '*'
  fail: msg="iptables_docker_swarm_network_adapter cannot have '*'"
  when:
    - iptables_docker_managed|bool
    - '"*" in iptables_docker_swarm_network_adapter'
  tags:
    - iptables_docker

- name: iptables Docker | Check for problem services
  command: systemctl show -p UnitFileState -p SubState {{ item }} warn=false
  register: stat_service_bad
  changed_when: false
  # no_log: true
# - debug: var=stat_service_bad.stdout_lines
  with_items:
    - "{{ iptables_docker_check_problem_service }}"
  when:
    - iptables_docker_managed|bool
    - iptables_docker_check_problem_service_managed|bool
  tags:
    - iptables_docker
    - iptables_docker_check_service

# - debug: var=stat_service_bad.results
#   when:
#     - iptables_docker_managed|bool
#     - iptables_docker_check_problem_service_managed|bool
#   tags:
#     - iptables_docker
#     - iptables_docker_check_service

- name: iptables Docker | Fail if specified problem service is running
  fail:
    msg: "{{ item.item }} service is running or enabled, and Docker can cause a problem with that service"
  with_items: "{{ stat_service_bad.results }}"
  when:
    - iptables_docker_managed|bool
    - iptables_docker_check_problem_service_managed|bool
    - ("SubState=running" in item.stdout_lines) or ("UnitFileState=enabled" in item.stdout_lines)
  tags:
    - iptables_docker
    - iptables_docker_check_service

- name: iptables Docker | Ensure required packages are installed
  package:
    name: "{{ iptables_docker_packages|default([]) }}"
    update_cache: yes
    state: installed
  environment: "{{ proxy_env }}"
  when:
    # - ansible_os_family == "RedHat"
#    - ansible_distribution_major_version == '7'
    - iptables_docker_managed|bool
    - iptables_docker_managed_pkg|bool
  tags:
    - iptables_docker
    - iptables_docker_pkg_install

# mkdir -p /etc/sysconfig/ipset.d
- name: iptables Docker | Make ipset config folder
  file:
    path: "{{ iptables_docker_ipset_config_dir }}"
    state: directory
  when: iptables_docker_managed|bool
  tags:
    - iptables_docker
    - iptables_config
    - iptables_config_ipset

- name: iptables Docker | Generate ipset config
  template:
    src: templates/ip_allow.set.j2
    dest: "{{ iptables_docker_ipset_config_dir }}/ip_allow.set"
    # validate: haproxy -f %s -c -q
  # environment:
  #   PATH: "/usr/sbin:/usr/local/sbin:/sbin:{{ install_haproxy_bin_dir }}"
  register: stat_iptables_docker_copy_ipset
  # notify:
  #   - reload ipset
  when: iptables_docker_managed|bool
  tags:
    - iptables_docker
    - iptables_config
    - iptables_config_ipset

- name: iptables Docker | Start ipset service
  systemd:
    name: ipset
    state: started
    enabled: yes
  when:
    - iptables_docker_managed|bool
    - stat_iptables_docker_copy_ipset.changed or iptables_docker_copy_ipset_force|bool
  tags:
    - iptables_docker
    - iptables_config
    - iptables_config_ipset

- name: iptables Docker | Reload ipset
  systemd:
    name: ipset
    state: reloaded
  when:
    - iptables_docker_managed|bool
    - stat_iptables_docker_copy_ipset.changed or iptables_docker_copy_ipset_force|bool
  tags:
    - iptables_docker
    - iptables_config
    - iptables_config_ipset

- name: iptables Docker | Generate iptables config
  template:
    src: templates/iptables.j2
    # dest: "{{ iptables_docker_iptables_config_dir }}/iptables"
    dest: "~/ansible_iptables_docker-iptables"
    validate: iptables-restore -t < %s
  # environment:
  #   PATH: "/usr/sbin:/usr/local/sbin:/sbin"
  register: stat_iptables_docker_copy_iptables
  # notify:
  #   - reload tables
  when:
    - iptables_docker_managed|bool
  tags:
    - iptables_docker
    - iptables_config
    - iptables_config_iptables

#Moved inside iptables file
# - name: Flush iptables
#   iptables:
#     chain: "{{ item }}"
#     flush: yes
#   with_items:  [ 'INPUT', 'DOCKER-USER', 'FILTERS' ]
#   when: stat_iptables_docker_copy_iptables.changed

- name: iptables Docker | iptables restore
  shell: iptables-restore -n < ~/ansible_iptables_docker-iptables
  # notify: iptables save
  when:
    - iptables_docker_managed|bool
    - stat_iptables_docker_copy_iptables.changed or iptables_docker_copy_iptables_force|bool
    - iptables_docker_start|bool
  tags:
    - iptables_docker
    - iptables_config
    - iptables_config_iptables

#iptables -I INPUT -j FILTERS
- name: Insert jump to FILTERS rule in INPUT at line 1
  iptables:
    chain: INPUT
    jump: FILTERS
    action: insert
    rule_num: "1"
  when:
    - iptables_docker_managed|bool
    - stat_iptables_docker_copy_iptables.changed or iptables_docker_copy_iptables_force|bool
    - iptables_docker_start|bool
  tags:
    - iptables_docker
    - iptables_config
    - iptables_config_iptables

#Only save these custom iptables rules. Remove anything Docker related since Docker needs to manage that.
- block:
  - name: iptables Docker | iptables save
    # command: service iptables save warn=false # noqa 303
    shell: |
      set -o pipefail
      iptables-save -t filter \
      |grep -Ev "FORWARD |OUTPUT |DOCKER |DOCKER-INGRESS |DOCKER-ISOLATION|INPUT -p udp " \
      > {{ iptables_docker_iptables_config_save | quote }}
  - name: iptables Docker | iptables validate save
    shell: iptables-restore -t < {{ iptables_docker_iptables_config_save | quote }}
    changed_when: false
  when:
    - iptables_docker_managed|bool
    - stat_iptables_docker_copy_iptables.changed or iptables_docker_copy_iptables_force|bool
    - iptables_docker_start|bool
  tags:
    - iptables_docker
    - iptables_config
    - iptables_config_iptables

- name: iptables Docker | Start iptables service
  systemd:
    name: iptables
    state: started
    enabled: yes
  when:
    - iptables_docker_managed|bool
    - stat_iptables_docker_copy_iptables.changed or iptables_docker_copy_iptables_force|bool
    - iptables_docker_start|bool
  tags:
    - iptables_docker
    - iptables_config
    - iptables_config_iptables

# docker iptables - testing on home centos7 swarmwork-02
# 
# iptables -nvL --line-numbers
# 
# yum install iptables iptables-services ipset ipset-service
# 
# vi iptables_ipset-allow.conf
# # Recreate the ipset if needed, and flush all entries
# create -exist ip_allow hash:ip family inet hashsize 1024 maxelem 65536
# flush
# # Give access to specific ips
# #add ip_allow 192.168.2.0/24
# add ip_allow 192.168.100.0/24
# 
# ipset restore < iptables_ipset-allow.conf
# ipset list | head
# 
#Or instead of the .conf above, add it here:
# mkdir -p /etc/sysconfig/ipset.d
# vi /etc/sysconfig/ipset.d/ip_allow.set
# # Recreate the ipset if needed, and flush all entries
# create -exist ip_allow hash:ip family inet hashsize 1024 maxelem 65536
# #flush
# # Give access to specific ips
# #add ip_allow 192.168.2.0/24
# add ip_allow 192.168.100.0/24
# 
# systemctl status ipset
# systemctl start ipset
# systemctl enable ipset
# 
# ipset list | head
# iptables -nvL --line-numbers
# 
# 
# 
# 
### iptables -I DOCKER-USER -i eth+ -m set ! --match-set ip_allow src -j DROP
### service ipset save
# 
# ls -alrt /etc/sysconfig/ipset.d/
# 
# 
# 
#### no - save iptables first, then start service to it uses existing iptables (otherwise flushes everything)
## iptables -F INPUT
# iptables -F DOCKER-USER
# iptables -F FILTERS
# iptables-restore -n < iptables.j2
# service iptables save
# saved to: cat /etc/sysconfig/iptables
# systemctl status iptables
# systemctl start iptables
# systemctl enable iptables
# 
# Note Problem with virtualbox, forwarded traffic to docker is dropped (ssh forwarded is ok)
# 
#Not this, fixed using iptables.j2 file...
#This only affects docker stuff. I can still get to SSH port regardless..
#Docker has so many wildcards everything matches unless you are very specific. Can't block all.
#iptables -nvL --line-numbers
#iptables -D INPUT 1
#iptables -D DOCKER-USER 1
#iptables -S DOCKER-USER
#iptables -I INPUT -p tcp -m tcp --dport 2222 -m set ! --match-set ip_allow src -j REJECT --reject-with icmp-port-unreachable
#iptables -I INPUT -p tcp -m tcp --dport 4444 -m set ! --match-set ip_allow src -j DROP
###iptables -I INPUT -p tcp -m tcp --dport ! 22 -m set ! --match-set ip_allow src -j DROP
#iptables -I DOCKER-USER -i eth+ -m set ! --match-set ip_allow src -j DROP
# 
